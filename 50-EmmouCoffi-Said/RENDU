                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: 50
Nom, prénom 1: Said Arbadine
Nom, prénom 2: Emmou Coffi Marie-Tiffany


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

oui `./dpll sudoku-4x4.cnf` donne la réponse attendue
---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

**à remplir**
   Pour la fonction `simplifie` nous avons utilisé `filter_map`.

   D'abord nous appelons `simplifie_aux`qui simplifie le littéral l dans la clause
   - si la clause contient l , retourne None 
   - si la clause contient not l, retourne la clause sans not l grace à `without_l`qui retourne la clause donnée en paramètre sans le littéral l
   - si la clause ne contient que not l, retourne la clause vide
   - sinon, retourne la clause sans modification
   
   Filter_map inverse l'odre de la liste, donc on réinverse l'ordre avec `List.rev` pour obtenir la liste dans l'ordre original

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

**à remplir**

   Pour `unitaire` :
   - Si la liste de clauses est vide ([]),il n'y a pas de litteral unitaire on leve un message d'erreur 
   - Si la liste de clauses n'est pas vide,on vérifie si la longueur de cette clause est égale à 1 en utilisant `List.length`
   - Sinon, on cherche récursivement une clause unitaire dans le reste de la liste de clause
   À la fin si aucune clause unitaire n'est trouvée, une excepetion est donc levée.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

**à remplir**

   Pour `pur`:

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

**à remplir**

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

**à remplir**

---

--fin du fichier RENDU--